/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Create a pet cat or dog
 */
export type CreateRequestBody =
  | (components.Cat & { type: "cat" })
  | (components.Dog & { type: "dog" });

export type CreatePetsResponseBody = {};

export type CreateResponseBody =
  | (components.Cat & { type: "cat" })
  | (components.Dog & { type: "dog" });

export type CreateResponse =
  | CreatePetsResponseBody
  | (components.Cat & { type: "cat" })
  | (components.Dog & { type: "dog" });

/** @internal */
export const CreateRequestBody$inboundSchema: z.ZodType<
  CreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.Cat$inboundSchema.and(
    z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
  ),
  components.Dog$inboundSchema.and(
    z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
  ),
]);

/** @internal */
export type CreateRequestBody$Outbound =
  | (components.Cat$Outbound & { type: "cat" })
  | (components.Dog$Outbound & { type: "dog" });

/** @internal */
export const CreateRequestBody$outboundSchema: z.ZodType<
  CreateRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRequestBody
> = z.union([
  components.Cat$outboundSchema.and(
    z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
  ),
  components.Dog$outboundSchema.and(
    z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestBody$ {
  /** @deprecated use `CreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRequestBody$inboundSchema;
  /** @deprecated use `CreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRequestBody$outboundSchema;
  /** @deprecated use `CreateRequestBody$Outbound` instead. */
  export type Outbound = CreateRequestBody$Outbound;
}

/** @internal */
export const CreatePetsResponseBody$inboundSchema: z.ZodType<
  CreatePetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreatePetsResponseBody$Outbound = {};

/** @internal */
export const CreatePetsResponseBody$outboundSchema: z.ZodType<
  CreatePetsResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePetsResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePetsResponseBody$ {
  /** @deprecated use `CreatePetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePetsResponseBody$inboundSchema;
  /** @deprecated use `CreatePetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePetsResponseBody$outboundSchema;
  /** @deprecated use `CreatePetsResponseBody$Outbound` instead. */
  export type Outbound = CreatePetsResponseBody$Outbound;
}

/** @internal */
export const CreateResponseBody$inboundSchema: z.ZodType<
  CreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.Cat$inboundSchema.and(
    z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
  ),
  components.Dog$inboundSchema.and(
    z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
  ),
]);

/** @internal */
export type CreateResponseBody$Outbound =
  | (components.Cat$Outbound & { type: "cat" })
  | (components.Dog$Outbound & { type: "dog" });

/** @internal */
export const CreateResponseBody$outboundSchema: z.ZodType<
  CreateResponseBody$Outbound,
  z.ZodTypeDef,
  CreateResponseBody
> = z.union([
  components.Cat$outboundSchema.and(
    z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
  ),
  components.Dog$outboundSchema.and(
    z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseBody$ {
  /** @deprecated use `CreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponseBody$inboundSchema;
  /** @deprecated use `CreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponseBody$outboundSchema;
  /** @deprecated use `CreateResponseBody$Outbound` instead. */
  export type Outbound = CreateResponseBody$Outbound;
}

/** @internal */
export const CreateResponse$inboundSchema: z.ZodType<
  CreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePetsResponseBody$inboundSchema),
  z.union([
    components.Cat$inboundSchema.and(
      z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
    ),
    components.Dog$inboundSchema.and(
      z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
    ),
  ]),
]);

/** @internal */
export type CreateResponse$Outbound =
  | CreatePetsResponseBody$Outbound
  | (components.Cat$Outbound & { type: "cat" })
  | (components.Dog$Outbound & { type: "dog" });

/** @internal */
export const CreateResponse$outboundSchema: z.ZodType<
  CreateResponse$Outbound,
  z.ZodTypeDef,
  CreateResponse
> = z.union([
  z.lazy(() => CreatePetsResponseBody$outboundSchema),
  z.union([
    components.Cat$outboundSchema.and(
      z.object({ type: z.literal("cat") }).transform((v) => ({ type: v.type })),
    ),
    components.Dog$outboundSchema.and(
      z.object({ type: z.literal("dog") }).transform((v) => ({ type: v.type })),
    ),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse$ {
  /** @deprecated use `CreateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponse$inboundSchema;
  /** @deprecated use `CreateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponse$outboundSchema;
  /** @deprecated use `CreateResponse$Outbound` instead. */
  export type Outbound = CreateResponse$Outbound;
}
