/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The Size of the dog'
 */
export const Size = {
  Small: "small",
  Medium: "medium",
  Large: "large",
} as const;
/**
 * The Size of the dog'
 */
export type Size = ClosedEnum<typeof Size>;

export type Dog = {
  /**
   * The type of pet
   */
  type: string;
  /**
   * The name of the dog
   */
  name: string;
  /**
   * The age of the dog
   */
  age: number;
  /**
   * The breed of the dog
   */
  breed: string;
  /**
   * The Size of the dog'
   */
  size: Size;
};

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const Dog$inboundSchema: z.ZodType<Dog, z.ZodTypeDef, unknown> = z
  .object({
    type: z.string(),
    name: z.string(),
    age: z.number(),
    breed: z.string(),
    size: Size$inboundSchema,
  });

/** @internal */
export type Dog$Outbound = {
  type: string;
  name: string;
  age: number;
  breed: string;
  size: string;
};

/** @internal */
export const Dog$outboundSchema: z.ZodType<Dog$Outbound, z.ZodTypeDef, Dog> = z
  .object({
    type: z.string(),
    name: z.string(),
    age: z.number(),
    breed: z.string(),
    size: Size$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dog$ {
  /** @deprecated use `Dog$inboundSchema` instead. */
  export const inboundSchema = Dog$inboundSchema;
  /** @deprecated use `Dog$outboundSchema` instead. */
  export const outboundSchema = Dog$outboundSchema;
  /** @deprecated use `Dog$Outbound` instead. */
  export type Outbound = Dog$Outbound;
}
